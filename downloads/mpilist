#! /usr/bin/perl -w
# MPI list maker
#
# (C) 2007 Chr. Junghans

#version 1.6   added short opts
#version 1.6.1 remove base name
#version 1.6.2 quiet bug

use strict;

$_=$0;
s#^.*/##;
my $progname=$_;
my $usage="Usage: $_ [OPTIONS] #nrcpus";
my $endlist="liste.mpi";
my $list=$ENV{HOME}.'/.mpi-hosts';
my $max=12;
my $quiet=undef;
my $onscreen=undef;
my $all=undef;

while ((defined ($ARGV[0])) and ($ARGV[0] =~ /^-/)){
        if (($ARGV[0] !~ /^--/) and (length($ARGV[0])>2)){
           $_=shift(@ARGV);
           if ( $_ =~ /^-[lo]/ ) {
              unshift(@ARGV,substr($_,0,2),substr($_,2));
           }
           else{
              unshift(@ARGV,substr($_,0,2),"-".substr($_,2));
           }
        }
	if (($ARGV[0] eq "-h") or ($ARGV[0] eq "--help")){
		print <<EOH;
Make list for mpirun!
$usage
#nrcpus          Number of cpus 
-o FILE          Changes the name of the listfile
                 Default: '$endlist'
-l, --list FILE  Changes the name of the hostfile
                 Default: '$list'
-a, --all        using 'findhost pckr' command as hosts
                 (ignores -l)
-v, --version    Prints version
-h, --help       Show this help message
-q, --quiet      Do not show messages execpt warnings
-p, --print      print to STDOUT instead to a file (ignores -o)
                 (use with -q for pipes)
EOH
		exit;
	}
	elsif (($ARGV[0] eq "-v") or ($ARGV[0] eq "--version")){
		print "$progname, version 1.6.2, 07.02.2008 by C.Junghans\n";
		exit;
	}
	elsif ($ARGV[0] eq "-o"){
		shift(@ARGV);
		$endlist=shift(@ARGV);
	}
	elsif (($ARGV[0] eq "-l") or ($ARGV[0] eq "--list")){
		shift(@ARGV);
		$list=shift(@ARGV);
	}
	elsif (($ARGV[0] eq "-a") or ($ARGV[0] eq "--all")){
		shift(@ARGV);
		$all="yes";
	}
	elsif (($ARGV[0] eq "-q") or ($ARGV[0] eq "--quiet")){
		shift(@ARGV);
		$quiet='';
	}
	elsif (($ARGV[0] eq "-p") or ($ARGV[0] eq "--print")){
		shift(@ARGV);
		$onscreen="yes";
	}
	else{
		print "Unknow option \'$ARGV[0]\' - ignored !\n";
		shift(@ARGV);
	}
}

#Print usage
if ($#ARGV == -1){
	print "Missing number of cpus\n";
	die $usage."\nHelp with $progname -h\n";
}

my $mpinr;
if ($ARGV[0] =~ /^(\d*)$/){
	$mpinr=$1;
}
else{
	print $usage."\n";
	die "Given #nrcpus (\'$ARGV[0]\') is no integer!\n";
}

if (($mpinr<1) or ($mpinr>$max)){
	print $usage."\n";
	die "Given #nrcpus (\'$mpinr\') not between 1 and $max\n";
}

my @hostlist;
unless (defined($all)){
	if ( -r "$list" ){
		print "Using hostlist \'$list\'\n" unless defined($quiet);
		open (FILE,$list) or die "Error opening $list";
		while (<FILE>){
			chomp($_);
			push(@hostlist,$_) unless $_ =~ /^#/;
		}
		close(FILE);
	}
	else{
		print "Hostfile not readable! -> using \'--all\' option\n" unless defined($quiet);
		$all="yes";
	}
}

if (defined($all)){
	print "Using all hosts 'findhost pckr' command\n" unless defined($quiet);
	open(FHOST,"findhost pckr |");
	while (<FHOST>){
		chomp($_);
                push(@hostlist,$_);
        }
        close(FHOST) or die "findhost command not found!\n";
}

my @names;
my @frees;
print "Checking:\n" unless defined($quiet);
foreach my $host (@hostlist){
	print $host."    \t: " unless defined($quiet);
	if (`ssh -q -q -f $host uptime 2> /dev/null` =~ /load average:[\d. ]*,[\d. ]*,([\d. ]*)\n/){
		my $load=$1;
		push(@names,$host);
		my $nrcpus=0;
		open(CPUINFO,"ssh -q -q -f $host cat /proc/cpuinfo 2> /dev/null |");
		while (<CPUINFO>){
			$nrcpus++ if $_ =~ /^processor/;
		}
		close(CPUINFO) or $nrcpus=1;
		my $free=$nrcpus-$load;
		printf("load=%.2f\t#cpus=%02i\t-> free=% .2f\n",$load,$nrcpus,$free) unless defined($quiet);
		push(@frees,$free);
	}
	else{
		print "failed!\n" unless defined($quiet);
	}
}

die "Too less host in the hostfile available!\n" if $#names==-1;

(open(ENDLIST,"> ".$endlist) or die "Error at opening file \'$endlist\'\n") unless defined($onscreen);

for (my $i=0;$i < $mpinr;$i++){
	my $max=$frees[0];
	my $name=$names[0];
	my $nr=0;
	for (my $j=0;$j < $#names+1;$j++){
		if($frees[$j]>$max){
			$max=$frees[$j];
			$name=$names[$j];
			$nr=$j;
		}
	}
	$frees[$nr]--;
	printf("%02i. using:\t%s    \t(new free then=% .2f)\n",$i+1,$name,$frees[$nr]) unless defined($quiet);
	defined($onscreen)?print $name."\n":print ENDLIST $name."\n";
}
close(ENDLIST) unless defined($onscreen);
